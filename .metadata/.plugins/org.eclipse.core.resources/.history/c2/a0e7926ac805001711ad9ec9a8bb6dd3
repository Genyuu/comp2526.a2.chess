package Chess;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import Pieces.*;

/**
 * JFrame object for a chess game GUI.
 * 
 * @author Chris Cho, A00972501, Set A
 *
 */
public class chessEngine extends JFrame{
    private Board board;
    private JMenuBar menu;
    private JMenuItem newMenuItem;
    private JMenuItem saveMenuItem;
    private JMenuItem clearMenuItem;
    private JMenuItem loadMenuItem;
    private MenuHandler menuListener;
    
    private Piece[][] piece;
    
    /**
     * Constructor for the chess Engine class.
     * Sets the frame settings, creates and adds a new board to it.
     * Initializes the board pieces and sets them up on the board.
     * 
     * @param title window frame title
     */
    public chessEngine(String title) {
        // Super class constructor call
        super(title);
        
        // Creates the menu bar listener
        menuListener = new MenuHandler();
        
        initMenu();
        
        // frame settings 
        this.pack();
        this.setSize(800,850);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        
        // Creates and adds 
        board = new Board();
        this.add(board);
        
        // Initializes the board with pieces for a game
        board.initPieces();
        board.initBoard();
    }
    
    /**
     * Creates and adds the menu bar and its items.
     * file-menu:
     * <ul>
     *     <li>"New" menu-item</li>
     *     <li>"Save" menu-item</li>
     *     <li>"Clear" menu-item</li>
     *     <li>"Load" menu-item</li>
     * </ul>
     */
    private final void initMenu() {
        menu = new JMenuBar();
        menu.setSize(new Dimension(800, 50));
        
        JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);
        menu.add(fileMenu);
        
        newMenuItem = new JMenuItem("New", KeyEvent.VK_N);
        newMenuItem.addActionListener(menuListener);
        fileMenu.add(newMenuItem);
        
        saveMenuItem = new JMenuItem("Save", KeyEvent.VK_S);
        saveMenuItem.addActionListener(menuListener);
        fileMenu.add(saveMenuItem);
        
        clearMenuItem = new JMenuItem("Clear", KeyEvent.VK_C);
        clearMenuItem.addActionListener(menuListener);
        fileMenu.add(clearMenuItem);
        
        loadMenuItem = new JMenuItem("Load", KeyEvent.VK_L);
        loadMenuItem.addActionListener(menuListener);
        fileMenu.add(loadMenuItem);
        
        this.setJMenuBar(menu);
    }

    /**
     *  Macro for saving the current board instance with Serializable.
     */
    public final void save() {
        try {
            FileOutputStream fileOut = new FileOutputStream("tmp\\chess.gam");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(board);
            out.close();
            fileOut.close();
            System.out.printf("Serialized data is saved in \\tmp\\chess.gam\n");
        } catch (IOException i) {
            i.printStackTrace();
        }
    }
    
    /**
     *  Macro for loading the current board instance with Serializable.
     */
    public final void load() {
        this.remove(board);
        board = null;
        try {
            FileInputStream fileIn = new FileInputStream("tmp\\chess.gam");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            board = (Board) in.readObject();
            in.close();
            fileIn.close();
        }catch(IOException i) {
            i.printStackTrace();
            return;
        }catch(ClassNotFoundException c) {
            System.out.println("Board class not found");
            c.printStackTrace();
            return;
        }
        
        this.add(board);
        this.repaint();
    }
    
    /**
     * Listens and handles menubar events.
     * @author Chris Cho, A00972501, Set A
     */
    public class MenuHandler implements ActionListener {
        /**
         * Action listener, evaluates the event of all JMenu events.
         * <ul>
         * <li>"New" Menu-item: this first clears the board and then reassembles the board with pieces in their original positions.</li>
         * <li>"Save" Menu-item: this saves a serialized instance of the board as "chess.gam" in the "\tmp" folder.</li>
         * <li>"Clear" Menu-item: this clears the board of all pieces.</li>
         * <li>"Load" Menu-item: this loads a serialized instance of the board identified as "chess.gam" from "\tmp" folder.</li>
         * </ul>
         */
        public void actionPerformed(ActionEvent e) {
            // Resets the board
            if ("New".equals(e.getActionCommand())) {
                board.clearBoard();
                board.initPieces();
                board.initBoard();
            }
            
            // Save the
            if ("Save".equals(e.getActionCommand())) {
                save();
            }
            
            // Clear the
            if ("Clear".equals(e.getActionCommand())) {
                board.clearBoard();
            }
            
            if ("Load".equals(e.getActionCommand())) {
                load();
            }
        }
    }
}
